
#include <iostream>
#include <bits/stdc++.h>
using namespace std;

typedef long long ll;


//O(sqrt(n))
bool isprime(int n )
{
	if (n == 1 || n == 0 ) return false;
	for (int i = 2 ; i <= n / i ; i += 1 +(i & 1))
	{
		if (n % i ==0 )
			return false;
	}
	return true;
}

//O(sqrt(n))
vector<int> factorize(int n)
{
	vector<int> ans ;
	for (int i = 2 ; i <= n / i ; i += 1 + (i&1))
	{
		while(n % i == 0)
		{
			ans.push_back(i);
			n/=i;
		}
	}

	if (n > 1)
		ans.push_back(n);
		
		

#include <iostream>
#include <bits/stdc++.h>
using namespace std;

typedef long long ll;


//O(sqrt(n))
bool isprime(int n )
{
	if (n == 1 || n == 0 ) return false;
	for (int i = 2 ; i <= n / i ; i += 1 +(i & 1))
	{
		if (n % i ==0 )
			return false;
	}
	return true;
}

//O(sqrt(n))
vector<int> factorize(int n)
{
	vector<int> ans ;
	for (int i = 2 ; i <= n / i ; i += 1 + (i&1))
	{
		while(n % i == 0)
		{
			ans.push_back(i);
			n/=i;
		}
	}

	if (n > 1)
		ans.push_back(n);
	return ans;
}

vector<ll>divisors(ll n)
{
	vector<ll> ans ;
	for (int i = 1 ; i <= n/ i ; i++)
	{
		if (n % i == 0)
		{
			ans.push_back(i);
			if (i * i != n)
				ans.push_back(n/i);
		}
	}

	return ans;
}


const int NN = 1e6 + 7;
bool prime[NN];
// O(N log(N))
void seive()
{
	memset(prime , 1 , sizeof prime);
	prime[0] = prime[1] = 0;
	for (int i = 2; i < NN /i ; i++ )
	{
		if (prime[i])
			for (int j = i * i ; j < NN ; j += i )
				prime[j] = 0;
	}
}


int comp[NN];
// O(N log N)
void modified_seive()
{
	//for (int i = 0 ; i < NN ; i ++) comp[i] = i ;
	iota(comp, comp+NN, 0);
	comp[0] = comp[1] = -1;
	for (int i = 2 ; i < NN / i ; ++i)
	{
		if (comp[i] == i)
			for (int j = i * i ; j < NN ; j += i )
			{
				if (comp[j] == j )
					comp[j] = i;
		}
	}
}

//O(log n)
vector<int> factorize_log(int n)
{
	vector<int> ans;
	while(n > 1)
	{
		ans.push_back(comp[n]);
		n/= comp[n];
	}
	return ans;
}

// O(log n)
vector<pair<int , int>> factorize3(int n ){

	vector<pair<int , int>> ans ;
	while(n > 1)
	{
		int cur = comp[n];
		int cnt = 0 ;
		while(n % cur == 0)
		{
			cnt ++;
			n/=cur;
		}
		ans.push_back({cur , cnt});
	}
	return ans;
}

const int N = 1e5 + 7 , M = 2 * N ;

ll power(ll x , ll p , ll M)
{
	ll ans = 1 ;
	while(p)
	{
		if (p & 1) ans = ans * x % M ;

		x = x * x % M ;
		p >>= 1 ; // p/=2;
	}
	return ans;
}

int gcd(int x , int y )
{
	if (y <= 0 )
	{
		return x;
	}
	else
	{
		return gcd(y , x % y);
	}

}
	return ans;
}

vector<ll>divisors(ll n)
{
	vector<ll> ans ;
	for (int i = 1 ; i <= n/ i ; i++)
	{
		if (n % i == 0)
		{
			ans.push_back(i);
			if (i * i != n)
				ans.push_back(n/i);
		}
	}

	return ans;
}


const int NN = 1e6 + 7;
bool prime[NN];
// O(N log(N))
void seive()
{
	memset(prime , 1 , sizeof prime);
	prime[0] = prime[1] = 0;
	for (int i = 2; i < NN /i ; i++ )
	{
		if (prime[i])
			for (int j = i * i ; j < NN ; j += i )
				prime[j] = 0;
	}
}


int comp[NN];
// O(N log N)
void modified_seive()
{
	//for (int i = 0 ; i < NN ; i ++) comp[i] = i ;
	iota(comp, comp+NN, 0);
	comp[0] = comp[1] = -1;
	for (int i = 2 ; i < NN / i ; ++i)
	{
		if (comp[i] == i)
			for (int j = i * i ; j < NN ; j += i )
			{
				if (comp[j] == j )
					comp[j] = i;
		}
	}
}

//O(log n)
vector<int> factorize_log(int n)
{
	vector<int> ans;
	while(n > 1)
	{
		ans.push_back(comp[n]);
		n/= comp[n];
	}
	return ans;
}

// O(log n)
vector<pair<int , int>> factorize3(int n ){

	vector<pair<int , int>> ans ;
	while(n > 1)
	{
		int cur = comp[n];
		int cnt = 0 ;
		while(n % cur == 0)
		{
			cnt ++;
			n/=cur;
		}
		ans.push_back({cur , cnt});
	}
	return ans;
}

const int N = 1e5 + 7 , M = 2 * N ;

ll power(ll x , ll p , ll M)
{
	ll ans = 1 ;
	while(p)
	{
		if (p & 1) ans = ans * x % M ;

		x = x * x % M ;
		p >>= 1 ; // p/=2;
	}
	return ans;
}

int gcd(int x , int y )
{
	if (y <= 0 )
	{
		return x;
	}
	else
	{
		return gcd(y , x % y);
	}

}
